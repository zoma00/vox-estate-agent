https://bill.ultahost.com/clientarea.php

# Ultahost VPS — Deployment guide for PropEstateAI (2 vCPU / 2 GB)

This guide is written for the Ultahost VPS plan you selected (2 vCPU, 2 GB RAM, 50 GB NVMe). It focuses on deploying the PropEstateAI demo/early production stack: static web frontend, static mobile frontend, and FastAPI backend (uvicorn + systemd). It assumes you will use the domain `propestateai.site`.

Summary of objectives
- Prepare the server (security, users, firewall)
- Install runtime prerequisites (Python, Node, nginx, certbot)
- Build and deploy frontends to `/var/www/propestateai/{web,mobile}`
- Run FastAPI backend under `systemd` and reverse‑proxy with `nginx`
- Obtain TLS with Certbot and enable auto‑renewal
- Monitoring, backups, and simple scaling notes

Prerequisites
- You have a fresh Ubuntu 24.04 LTS VPS with public IP `VPS_IP` (replace below)
- You own the domain `propestateai.site` and can set DNS A record to point to `VPS_IP`
- You have SSH access to the VPS and `sudo` privileges

Quick commands (run on VPS as your SSH user)
```bash
# update system
'sudo apt update && sudo apt upgrade -y'

# create a non-root deploy user (optional but recommended)
sudo adduser deploy
sudo usermod -aG sudo deploy

# basic packages
sudo apt install -y nginx git python3 python3-venv python3-pip nodejs npm certbot python3-certbot-nginx ufw

# create project directories
sudo mkdir -p /var/www/propestateai/web
sudo mkdir -p /var/www/propestateai/mobile
sudo chown -R $USER:$USER /var/www/propestateai

# firewall
sudo ufw allow OpenSSH
sudo ufw allow 'Nginx Full'
sudo ufw enable
sudo ufw status
```

Build frontends locally (recommended) and copy builds to server
- Web (CRA):
```bash
cd web-frontend/webfront
npm ci
npm run build
# copy build/* to /var/www/propestateai/web on the server (example using scp)
scp -r build/* deploy@VPS_IP:/home/deploy/tmp_web_build/
ssh deploy@VPS_IP 'sudo rsync -a /home/deploy/tmp_web_build/ /var/www/propestateai/web/'
```

- Mobile (Vite):
```bash
cd mobile-frontend
npm ci
npm run build
scp -r dist/* deploy@VPS_IP:/home/deploy/tmp_mobile_build/
ssh deploy@VPS_IP 'sudo rsync -a /home/deploy/tmp_mobile_build/ /var/www/propestateai/mobile/'
```

Backend: create a Python virtualenv and install requirements
```bash
cd /home/deploy
git clone git@github.com:zoma00/vox-estate-agent.git
cd vox-estate-agent/backend/realestate_agent
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

Create a systemd service for the backend (example `/etc/systemd/system/propestateai.service`)
```ini
[Unit]
Description=PropEstateAI FastAPI app (uvicorn)
After=network.target

[Service]
User=deploy
Group=www-data
WorkingDirectory=/home/deploy/vox-estate-agent/backend/realestate_agent
Environment="PATH=/home/deploy/vox-estate-agent/backend/realestate_agent/venv/bin"
EnvironmentFile=-/home/deploy/vox-estate-agent/backend/realestate_agent/.env
ExecStart=/home/deploy/vox-estate-agent/backend/realestate_agent/venv/bin/uvicorn realestate_agent.main:app --host 127.0.0.1 --port 8000 --workers 2
Restart=on-failure

[Install]
WantedBy=multi-user.target
```

Enable and start the service
```bash
sudo systemctl daemon-reload
sudo systemctl enable propestateai.service
sudo systemctl start propestateai.service
sudo systemctl status propestateai.service
```

Nginx config (example `/etc/nginx/sites-available/propestateai`) — replace `VPS_IP` and domain aliases
```nginx
server {
  listen 80;
  server_name propestateai.site www.propestateai.site;
  return 301 https://$host$request_uri;
}

server {
  listen 443 ssl;
  server_name propestateai.site www.propestateai.site;

  ssl_certificate /etc/letsencrypt/live/propestateai.site/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/propestateai.site/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  root /var/www/propestateai/web;
  index index.html;

  location / {
    try_files $uri /index.html;
  }

  location /mobile/ {
    alias /var/www/propestateai/mobile/;
    try_files $uri /mobile/index.html;
  }

  location /api/ {
    proxy_pass http://127.0.0.1:8000/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "no-referrer-when-downgrade" always;
}
```

Enable site and reload nginx
```bash
sudo ln -s /etc/nginx/sites-available/propestateai /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx
```

TLS: obtain certificates with Certbot
```bash
sudo apt install -y certbot python3-certbot-nginx
sudo certbot --nginx -d propestateai.site -d www.propestateai.site
sudo certbot renew --dry-run
```

Post-deploy checks
- Visit `https://propestateai.site` and `https://propestateai.site/mobile/` to verify the frontends.
- Check backend health: `curl http://127.0.0.1:8000/` (use correct health endpoint if implemented).
- Monitor logs: `sudo journalctl -u propestateai.service -f` and `sudo tail -f /var/log/nginx/error.log`.

Backups and monitoring
- Enable provider snapshots or setup `rsync`/`duplicity` to remote object storage.
- Install Netdata or use provider metrics to monitor CPU, RAM, and disk.

Scaling recommendations
- If memory/CPU is constrained, upgrade to 4 GB RAM / 2 vCPU or higher.
- Offload heavy TTS processing to a separate worker (queue jobs via Redis and process on a larger instance or GPU-backed node).

Security reminders
- Do not commit secrets—use an `.env` outside the repo and reference it in the systemd `EnvironmentFile`.
- Keep packages updated, enable `fail2ban`, and restrict SSH (key-based auth only).

Troubleshooting tips
- If systemd fails to start: `sudo journalctl -u propestateai.service -b`.
- If nginx fails: `sudo nginx -t` and inspect `/var/log/nginx/error.log`.

If you want, I can now:
- Fill these templates with your exact `VPS_IP` and `deploy` username,
- Create the exact files in the repo (`deploy/nginx` and `deploy/systemd`) and commit them, or
- Prepare a GitHub Actions workflow to build frontends and upload artifacts to the VPS automatically.


** so check this may be suitable as i startup:

يبدأ من
$10.50 USD شهري
2 CPU Core
2 GB RAM
50 GB NVMe SSD
Unmetered bandwidth
1 dedicated IPs
Free 1-year SSL certificate



amswer:
----------

I'll add a short todo marking "Advise on selected VPS plan" as in-progress, then give a concise suitability assessment with actionable recommendations and commands; afterwards I'll mark the todo completed. 

Completed (2/4) *Decide hosting option*

Progress update: I’m evaluating the VPS plan you listed and will give a concise recommendation.

Short verdict
- The plan at $10.50/mo with 2 vCPU, 2 GB RAM, and 50 GB NVMe is a reasonable, cost-effective 
starting point for a small production site with light traffic, but it has limitations if you expect moderate concurrency or run heavy TTS/model workloads. For a demo and early-stage production with caching/CDN and external media/DB services, it’s acceptable.

Why this is reasonable
- 2 vCPUs: allows handling more concurrent requests than 1 vCPU; good for nginx + uvicorn + 
light background tasks.
- 2 GB RAM: workable for FastAPI + small workers; expect to tune memory usage and avoid 
memory-heavy operations on the same machine.
- 50 GB NVMe: enough for code, logs, and small media; good to offload larger media to object 
storage (S3 or equivalent).
- Price point: good balance between cost and capabilities for early production.

Limitations to plan for
- Memory: 2 GB can be tight if you run several processes (nginx, uvicorn, node builds,
 background TTS, DB). Monitor and add swap if needed, but don't rely on swap.
- Concurrency & CPU: TTS or model inference may saturate CPU; offload heavy workloads to 
separate worker nodes or use hosted inference.
- Database: For anything beyond trivial data, prefer managed DB or separate DB instance.
- Backups: Ensure snapshots/backup plan—50 GB will fill quickly if you store audio or builds.

Operational recommendations (immediate)
- Use nginx to serve static builds and reverse proxy `/api` to uvicorn on localhost:8000.
- Use systemd to run the backend and configure environment variables.
- Offload:
  - Media (images, large audio) to object storage (S3, Wasabi, Backblaze).
  - Heavy TTS processing to another instance or use cloud inference.
  - Database to managed DB service (or separate small VPS).
- Enable monitoring (e.g., Netdata or provider metrics) and alerting for high memory/CPU.

Quick bootstrap commands (run on the VPS)
```bash
# update + essentials
sudo apt update && sudo apt upgrade -y
sudo apt install -y nginx git python3 python3-venv python3-pip nodejs npm

# enable swap (cautious; only as fallback)
sudo fallocate -l 2G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
# make permanent
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

# enable UFW
sudo ufw allow OpenSSH
sudo ufw allow 'Nginx Full'
sudo ufw enable

# create project dirs
sudo mkdir -p /var/www/propestateai/web
sudo mkdir -p /var/www/propestateai/mobile
sudo chown -R $USER:$USER /var/www/propestateai
```

Monitoring & scaling plan
- Start with this VPS and monitor for 1-2 weeks.
- If you observe high RAM or CPU, upgrade to 4 GB/2 vCPU or 4 vCPU/8 GB depending on load.
- For TTS-heavy workloads, use a separate worker instance (or GPU instance) and queue jobs.

Conclusion
- Good enough for early production and demos with low traffic; prepare to offload heavy tasks and monitor usage. If you want, I can:
  - Produce exact `nginx` and `systemd` templates tailored to this VPS plan and `propestateai.site`.
  - Draft a simple autoscaling/upgrade checklist and cost estimate for 2→4→8 GB upgrades.
  - Provide commands to set up backups and monitoring.

Marking the todo "Advise on selected VPS plan" completed — tell me which of the follow-ups above (nginx+systemd, autoscale plan, backups/monitoring) to do next.Monitoring & scaling plan
- Start with this VPS and monitor for 1-2 weeks.
- If you observe high RAM or CPU, upgrade to 4 GB/2 vCPU or 4 vCPU/8 GB depending on load.
- For TTS-heavy workloads, use a separate worker instance (or GPU instance) and queue jobs.

Conclusion
- Good enough for early production and demos with low traffic; prepare to offload heavy tasks and monitor usage. If you want, I can:
  - Produce exact `nginx` and `systemd` templates tailored to this VPS plan and `propestateai.site`.
  - Draft a simple autoscaling/upgrade checklist and cost estimate for 2→4→8 GB upgrades.
  - Provide commands to set up backups and monitoring.

Marking the todo "Advise on selected VPS plan" completed — tell me which of the follow-ups above (nginx+systemd, autoscale plan, backups/monitoring) to do next.








































ستضافة VPS لينكس - VPS Basic
1 CPU Core
1 GB RAM
30 GB NVMe SSD
Unmetered bandwidth
1 dedicated IPs
Free 1-year SSL certificate
** is this sutable for my project propestatai if i move up for a real project not demo


- GitHub Copilot

- That VPS Basic (1 vCPU, 1 GB RAM, 30 GB NVMe) is fine for a quick demo / proof-of-concept, 
but NOT recommended for a real production deployment of PropEstateAI.

Why not suitable for production:
----------------------------------

- 1 GB RAM will cause swapping and instability under concurrent web + backend + worker load.
- CPU limited for concurrent API requests, TTS processing, or any background jobs.
- Disk (30 GB) may be small if you store images, audio, or DB locally.
- No headroom for spikes, builds, or background model processing.

Recommended minimums
---------------------

- Lightweight production (low traffic): 2 vCPU, 4 GB RAM, 40–80 GB SSD, managed Postgres (or separate DB server).
- Typical production (moderate traffic or TTS): 4 vCPU, 8+ GB RAM, 80+ GB SSD, separate worker(s) for TTS; consider GPU instance if running heavy models.
- For heavy AI/TTS processing: use separate worker nodes or cloud GPU instances (e.g., AWS G4/G5, or dedicated inference service).



Other production considerations
- Use systemd + nginx, UFW, fail2ban, automatic backups / snapshots, monitored logs.
- Serve static frontends via nginx + CDN (Cloudflare) to reduce origin load.
- Use managed DB or separate DB VM to avoid resource contention.
- Add swap only as emergency fallback; don’t rely on swap for normal load.

If you must start small (practical path)
1. Start with VPS Basic for staging/dev (deploy and smoke test).
2. Move to 2 vCPU / 4GB for production as soon as you expect real users.
3. Offload media to object storage (S3 or provider equivalent) and use managed DB.

Quick commands to check current machine (run on server)
```bash
free -h       # memory
lscpu         # cpu info
df -h         # disk usage
top / htop    # realtime load
```

If you want, I can:
- Propose a specific VPS plan from DigitalOcean/Hetzner that matches the recommended minima.
- Draft an upgrade checklist and migration steps (how to move from 1GB → 4GB with minimal downtime).

Which would you like?