import React, { useState, useRef, useEffect, useCallback } from 'react';
import axios from 'axios';
import { formatMessageWithLinks } from './utils/linkUtils';
import TTSService from './utils/ttsService';
import ChromeSpeechRecognition from './components/ChromeSpeechRecognition';

const agentImg = 'https://cdn-icons-png.flaticon.com/512/4712/4712027.png';
const API_URL = 'http://localhost:8000/api/chat';

function SpeakChat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [transcript, setTranscript] = useState('');
  const [isTtsReady, setIsTtsReady] = useState(false);
  const [isTtsTesting, setIsTtsTesting] = useState(false);
  const messagesEndRef = useRef(null);

  // Initialize and warm up the TTS service on component mount
  useEffect(() => {
    let isMounted = true;
    const warmUpTts = async () => {
      try {
        console.log('Warming up TTS service...');
        await TTSService.textToSpeech('Hello', 'en');
        if (isMounted) {
          console.log('TTS service is ready.');
          setIsTtsReady(true);
        }
      } catch (error) {
        if (isMounted) {
          console.error('TTS service warm-up failed:', error);
          setError('TTS service is unavailable.');
          setIsTtsReady(false);
        }
      }
    };

    warmUpTts();
    return () => { isMounted = false; };
  }, []);

  // Auto-scroll to bottom of messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, loading]);

  // Handle transcript updates
  useEffect(() => {
    if (transcript) {
      setInput(prev => {
        const newInput = prev ? `${prev} ${transcript}`.trim() : transcript;
        return newInput;
      });
    }
  }, [transcript]);

  // Handle speech recognition results
  const handleSpeechResult = useCallback((text) => {
    console.log('Speech result received:', text);
    if (text && text.trim()) {
      setTranscript(prev => {
        const newInput = prev ? `${prev} ${text}`.trim() : text;
        setInput(newInput);
        return newInput;
      });
    }
  }, []);

  // Read text aloud
  const handleSpeakText = useCallback(async (text) => {
    if (!text) return;
    
    console.log('Speaking text:', text);
    setIsSpeaking(true);
    
    try {
      await TTSService.speak(text);
      console.log('Finished speaking');
    } catch (error) {
      console.error('Error in text-to-speech:', error);
      if (window.speechSynthesis) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.onend = () => setIsSpeaking(false);
        speechSynthesis.speak(utterance);
      }
    } finally {
      setIsSpeaking(false);
    }
  }, []);

  // Memoize the handleSpeakText function to prevent unnecessary re-renders
  const memoizedHandleSpeakText = useCallback((text) => {
    return handleSpeakText(text);
  }, [handleSpeakText]);

  // Handle sending messages
  const handleSendMessage = async () => {
    if (!input.trim()) return;
    
    const userMessage = input.trim();
    setInput('');
    
    // Add user message to chat
    setMessages(prev => [...prev, {
      text: userMessage,
      sender: 'user',
      timestamp: new Date().toISOString()
    }]);
    
    setLoading(true);
    
    try {
      const response = await axios.post(API_URL, { message: userMessage });
      const { response: botResponse, links } = response.data;
      
      setMessages(prev => [...prev, {
        text: botResponse,
        sender: 'agent',
        timestamp: new Date().toISOString(),
        links: links || []
      }]);
      
      // Auto-scroll to bottom
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    } catch (error) {
      console.error('Error sending message:', error);
      setError('Failed to send message. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Handle Enter key press in the input field
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Render message with clickable links
  const renderMessageWithLinks = (text, isAgent = false) => {
    if (!text) return null;
    const formattedText = formatMessageWithLinks(text);
    
    return (
      <div className="message-content" style={{ lineHeight: '1.4' }}>
        <div dangerouslySetInnerHTML={{ __html: formattedText }} />
        {isAgent && (
          <button 
            onClick={() => handleSpeakText(text)}
            className="speak-button"
            aria-label="Read message aloud"
            style={{
              background: 'none',
              border: 'none',
              cursor: 'pointer',
              padding: '2px 4px',
              marginLeft: '6px',
              color: isSpeaking ? '#1a73e8' : '#666',
              fontSize: '0.85em',
              display: 'inline-flex',
              alignItems: 'center',
              verticalAlign: 'middle',
            }}
          >
            {isSpeaking ? '⏹️' : '🔊'}
          </button>
        )}
      </div>
    );
  };

  // Main chat container with smaller dimensions
  return (
    <div style={{
      display: 'flex',
      flexDirection: 'column',
      height: '100vh',
      backgroundColor: '#f5f5f5',
      maxWidth: '500px',
      margin: '0 auto',
      position: 'relative',
      boxShadow: '0 0 15px rgba(0,0,0,0.1)'
    }}>
      {/* Messages container */}
      <div style={{
        flex: 1,
        overflowY: 'auto',
        padding: '1rem',
        display: 'flex',
        flexDirection: 'column',
        gap: '1rem'
      }}>
        {messages.map((message, index) => (
          <div
            key={index}
            style={{
              alignSelf: message.sender === 'user' ? 'flex-end' : 'flex-start',
              maxWidth: '80%',
              backgroundColor: message.sender === 'user' ? '#e3f2fd' : 'white',
              padding: '0.75rem 1rem',
              borderRadius: '18px',
              boxShadow: '0 1px 2px rgba(0,0,0,0.1)',
              position: 'relative'
            }}
          >
            {renderMessageWithLinks(message.text, message.sender === 'agent')}
            {message.links && message.links.length > 0 && (
              <div style={{ marginTop: '0.5rem' }}>
                {message.links.map((link, i) => (
                  <a
                    key={i}
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    style={{
                      color: '#1a73e8',
                      textDecoration: 'none',
                      display: 'block',
                      marginTop: '0.25rem',
                      fontSize: '0.9em',
                      wordBreak: 'break-word'
                    }}
                  >
                    {link.title || link.url}
                  </a>
                ))}
              </div>
            )}
          </div>
        ))}
        {loading && (
          <div style={{
            alignSelf: 'flex-start',
            backgroundColor: 'white',
            padding: '0.6rem 1rem',
            borderRadius: '18px',
            boxShadow: '0 1px 2px rgba(0,0,0,0.1)',
            display: 'flex',
            alignItems: 'center',
          }}>
            <div className="typing-dots">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input area */}
      <div style={{
        padding: '0.8rem',
        backgroundColor: 'white',
        borderTop: '1px solid #eee',
        display: 'flex',
        alignItems: 'center',
      }}>
        <div style={{
          flex: 1,
          position: 'relative',
          display: 'flex',
          alignItems: 'center',
        }}>
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="Type your message..."
            disabled={loading}
            style={{
              flex: 1,
              padding: '0.6rem 1rem',
              border: '1px solid #ddd',
              borderRadius: '20px',
              fontSize: '0.9rem',
              outline: 'none',
              boxShadow: '0 1px 2px rgba(0,0,0,0.05)',
              transition: 'all 0.2s',
              paddingRight: '50px',
            }}
          />
          <button
            onClick={() => {
              if (!isListening) {
                startListening();
              } else {
                stopListening();
              }
            }}
            style={{
              position: 'absolute',
              right: '0.5rem',
              backgroundColor: 'transparent',
              border: 'none',
              color: isListening ? '#f44336' : '#666',
              cursor: 'pointer',
              padding: '0.25rem',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
            title={isListening ? 'Stop Listening' : 'Start Listening'}
          >
            {isListening ? '🛑' : '🎤'}
          </button>
        </div>
        <button
          onClick={handleSendMessage}
          disabled={!input.trim() || loading}
          style={{
            backgroundColor: input.trim() ? '#1a73e8' : '#f1f3f4',
            color: input.trim() ? 'white' : '#9aa0a6',
            border: 'none',
            borderRadius: '50%',
            width: '40px',
            height: '40px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            cursor: input.trim() && !loading ? 'pointer' : 'not-allowed',
            transition: 'all 0.2s',
            marginLeft: '0.5rem',
          }}
          title="Send message"
        >
          {loading ? (
            <div className="spinner" style={{
              width: '16px',
              height: '16px',
              border: '2px solid rgba(255,255,255,0.3)',
              borderRadius: '50%',
              borderTopColor: 'white',
              animation: 'spin 1s ease-in-out infinite',
            }} />
          ) : (
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M22 2L11 13" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          )}
        </button>
      </div>

      {/* Error message */}
      {error && (
        <div style={{
          position: 'fixed',
          bottom: '1rem',
          left: '50%',
          transform: 'translateX(-50%)',
          backgroundColor: '#f44336',
          color: 'white',
          padding: '0.5rem 1rem',
          borderRadius: '4px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
          zIndex: 1000,
          maxWidth: '90%',
          textAlign: 'center',
        }}>
          {error}
        </div>
      )}

      {/* Animation and touch feedback styles */}
      <style jsx global>{`
        @keyframes typing {
          0%, 60%, 100% { transform: translateY(0); }
          30% { transform: translateY(-4px); }
        }
        
        .typing-dots {
          display: flex;
          gap: 4px;
          padding: 0.5rem;
        }
        
        .typing-dots span {
          width: 6px;
          height: 6px;
          border-radius: 50%;
          background-color: #666;
          animation: typing 1.4s infinite ease-in-out;
        }
        
        .typing-dots span:nth-child(1) {
          animation-delay: 0s;
        }
        
        .typing-dots span:nth-child(2) {
          animation-delay: 0.2s;
        }
        
        .typing-dots span:nth-child(3) {
          animation-delay: 0.4s;
        }
        
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
        
        button:active {
          transform: scale(0.95) !important;
          transition: transform 0.1s;
        }
      `}</style>
    </div>
  );
}

export default SpeakChat;
