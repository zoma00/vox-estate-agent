(venv) hazem-elbatawy@hazem-elbatawy-Vostro-15-3510:~/Downloads/vox-estate-agent/backend/realestate_agent$ python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
Loading environment variables from: /home/hazem-elbatawy/Downloads/vox-estate-agent/backend/realestate_agent/.env
Current working directory: /home/hazem-elbatawy/Downloads/vox-estate-agent/backend/realestate_agent
OPENAI_API_KEY is set: Yes
INFO:app.tts_service:Initializing TTS engine...
INFO:app.tts_service:TTS Engine initialized with voice: gmw/en
INFO:     Started server process [32898]
INFO:     Waiting for application startup.
INFO:app.main:Application startup: Created necessary directories
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO:     127.0.0.1:41742 - "POST /api/chat HTTP/1.1" 422 Unprocessable Entity
INFO:app.main:TTS Request - Text: No response..., Language: en
[TTS] Starting TTS generation for text: 'No response...'
[TTS] Language: en, Output path: static/audio/output_20250920_000043_2f97bc1e.wav
[TTS] Initializing gTTS...
[TTS] Saving audio to: static/audio/output_20250920_000043_2f97bc1e.wav
[TTS] Audio file created successfully at static/audio/output_20250920_000043_2f97bc1e.wav. Size: 11520 bytes
INFO:tts.tts_simple:Audio file created successfully at static/audio/output_20250920_000043_2f97bc1e.wav. Size: 11520 bytes
INFO:app.agent_pipeline:TTS generated: static/audio/output_20250920_000043_2f97bc1e.wav (URL: /static/audio/output_20250920_000043_2f97bc1e.wav)
INFO:app.main:TTS audio generated successfully. URL: {'audio_path': 'static/audio/output_20250920_000043_2f97bc1e.wav', 'audio_url': '/static/audio/output_20250920_000043_2f97bc1e.wav'}
INFO:     127.0.0.1:41754 - "POST /api/tts HTTP/1.1" 200 OK








Fix: "No response" / 422 from `/api/chat` - mobile frontend

Date: 2025-09-20
Branch: feature/tts-implementation

Problem observed
- When sending chat requests from the mobile frontend, the backend logged: `POST /api/chat 422 Unprocessable Entity`.
- The backend TTS endpoint (`/api/tts`) worked correctly (200 OK), but `/api/chat` returned 422 because the request body did not match the FastAPI `ChatRequest` Pydantic model.

Root cause
- The mobile UI was sending `{ message: '...' }` in the request body. FastAPI expects the field `text: str` (model `ChatRequest`) plus validated fields like `generate_audio`, `open_urls`, and `language`.

What I changed
1. Updated mobile chat request payload
   - File: `mobile-frontend/src/pages/Chat.jsx`
   - Now sends the backend-expected shape:
     ```json
     {
       "text": "...",
       "generate_audio": true,
       "open_urls": true,
       "language": "en"
     }
     ```

2. Improved response parsing and playback
   - The frontend now tolerantly reads reply text from `data.text`, `data.response`, `data.message`, `data.reply`, or `data.response`.
   - If backend returns `audio_url`, the frontend plays it directly (rewriting relative `/static/...` URLs to include the backend host and port when needed).
   - If no `audio_url` is present, the frontend uses `TTSService.speak()` to request `/api/tts` or fallback to browser `speechSynthesis`.

3. Verified build and run
   - Rebuilt/ran the mobile frontend dev server (`npm run dev`) and verified Hot Module Replacement updated the code.
   - Confirmed backend (uvicorn) shows successful `POST /api/chat 200 OK` after the fix and TTS audio gets generated and played.

How to test locally
1. Start backend (example):

   ```bash
   cd backend/realestate_agent
   source venv/bin/activate
   python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
   ```

2. Start mobile frontend dev server:

   ```bash
   cd mobile-frontend
   npm install
   npm run dev
   ```

3. Open the dev URL (e.g., `http://localhost:5173`) and navigate to `/chat`. Send a message.
   - The backend logs should show `POST /api/chat` with a 200 status and `TTS audio generated successfully` entries.
   - The frontend will show the reply and play audio (either via returned `audio_url` or by calling `/api/tts`).

Notes and next steps
- If the backend returns relative `audio_url` (e.g., `/static/...`), ensure the backend is reachable from the device/browser used to test; otherwise the frontend rewrites the URL to point at `http://<backend-host>:8000/static/...`.
- Consider adding request logging in the backend temporarily if more 422 cases appear to see exact payloads.
- I did not change backend validation; the fix was applied client-side to match the model.

Files changed
- `mobile-frontend/src/pages/Chat.jsx` (payload + response handling)

If you'd like, I can:
- Add a short curl example that demonstrates a valid `/api/chat` request you can run from the server, or
- Add temporary request-logging middleware to the backend to help debug future 422s.

End of note.
